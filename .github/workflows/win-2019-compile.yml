name: Windows Server 2019 x64 Compile

on: [push,workflow_dispatch,workflow_call]

defaults:
  run:
    shell: cmd

jobs:
  build:

    runs-on: windows-2019

    steps:
      - name: Get Current OS version
        run: |
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: Check out current repository
        uses: actions/checkout@v3

        with:
          submodules: 'recursive'

      - name: Check out zlib repository
        uses: actions/checkout@v3
        with:
          repository: desktop-app/zlib
          path: zlib

      - name: Setup msbuild.exe
        uses: microsoft/setup-msbuild@v1.1

      - name: Install Pkg-config Lite
        run: choco install pkgconfiglite

      - name: Compile zlib Win64
        run: |
          cd zlib\contrib\vstudio\vc14
          msbuild zlibstat.vcxproj /p:Configuration=ReleaseWithoutAsm /p:platform=x64 -p:PlatformToolset=v142

      - name: Install pre-compiled OpenSSL Win64
        run: |
          curl  -Lo openssl-1.1.1o.zip https://github.com/neodiX42/precompiled-openssl-win64/raw/main/openssl-1.1.1o.zip
          jar xf openssl-1.1.1o.zip

      - name: Install pre-compiled libmicrohttpd Win64
        run: |
          curl  -Lo libmicrohttpd-latest-w32-bin.zip https://ftpmirror.gnu.org/libmicrohttpd/libmicrohttpd-latest-w32-bin.zip
          unzip libmicrohttpd-latest-w32-bin.zip

      - uses: seanmiddleditch/gha-setup-ninja@master
        run: |
          set root=%cd%
          echo %root%
          mkdir build
          cd build
          cmake -GNinja -DPORTABLE=1 -DZLIB_FOUND=1 -DMHD_FOUND=1 -DMHD_LIBRARY=%root%\libmicrohttpd-0.9.75-w32-bin\x86_64\VS2019\Release-static\libmicrohttpd.lib -DMHD_INCLUDE_DIR=%root%\libmicrohttpd-0.9.75-w32-bin\x86_64\VS2019\Release-static -DZLIB_INCLUDE_DIR=%root%\zlib -DZLIB_LIBRARY=%root%\zlib\contrib\vstudio\vc14\x64\ZlibStatReleaseWithoutAsm\zlibstat.lib -DOPENSSL_FOUND=1 -DOPENSSL_INCLUDE_DIR=%root%/openssl-1.1/x64/include -DOPENSSL_CRYPTO_LIBRARY=%root%/openssl-1.1/x64/lib/libcrypto.lib -DCMAKE_CXX_FLAGS="/DTD_WINDOWS=1 /EHsc /bigobj" ..
          ninja storage-daemon storage-daemon-cli blockchain-explorer fift func tonlib tonlibjson tonlib-cli validator-engine lite-client pow-miner validator-engine-console generate-random-id json2tlo dht-server http-proxy rldp-http-proxy adnl-proxy create-state create-hardfork

      - name: Check if validator-engine.exe exists
        run: |
          copy %cd%\build\validator-engine\validator-engine.exe test

      - name: Find & copy binaries
        run: |
          mkdir artifacts
          mkdir artifacts\smartcont
          mkdir artifacts\lib

          copy build\storage\storage-daemon\storage-daemon.exe artifacts\
          copy build\storage\storage-daemon\storage-daemon-cli.exe artifacts\
          copy build\blockchain-explorer\blockchain-explorer.exe artifacts\
          copy build\crypto\fift.exe artifacts\
          copy build\crypto\tlbc.exe artifacts\
          copy build\crypto\func.exe build\crypto\create-state.exe artifacts\
          copy build\validator-engine-console\validator-engine-console.exe artifacts\
          copy build\tonlib\tonlib-cli.exe artifacts\
          copy build\tonlib\tonlibjson.dll artifacts\
          copy build\http\http-proxy.exe artifacts\
          copy build\rldp-http-proxy\rldp-http-proxy.exe artifacts\
          copy build\dht-server\dht-server.exe artifacts\
          copy build\lite-client\lite-client.exe artifacts\
          copy build\validator-engine\validator-engine.exe  artifacts\
          copy build\utils\generate-random-id.exe  artifacts\
          copy build\utils\json2tlo.exe build\adnl\Release\adnl-proxy.exe artifacts\
          xcopy /e /k /h /i crypto\smartcont artifacts\smartcont
          xcopy /e /k /h /i crypto\fift\lib artifacts\lib

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: ton-win-binaries
          path: artifacts
