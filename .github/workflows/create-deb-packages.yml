name: Create packages

on: [workflow_dispatch]

permissions: write-all

jobs:
  create-release:
    runs-on: ubuntu-22.04
    env:
      USER: runner
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    steps:
      - uses: actions/checkout@v3

      - name: Create packages
        run: |
          REPO_DIR=$PWD
          git fetch --all --tags
          TAG=$(gh release list |  awk '{print $(NF-1)}')
          echo "latest TAG = $TAG"

          mkdir ../work; cd ../work
          curl -L https://github.com/ton-blockchain/ton/releases/latest/download/ton-linux-arm64.zip -o ton-linux-arm64.zip
          curl -L https://github.com/ton-blockchain/ton/releases/latest/download/ton-linux-x86_64.zip -o ton-linux-amd64.zip
          unzip ton-linux-arm64.zip -d ton-linux-arm64
          unzip ton-linux-amd64.zip -d ton-linux-amd64
          rm -rf ton-linux-arm64/lib ton-linux-arm64/smartcont
          rm -rf ton-linux-amd64/lib ton-linux-amd64/smartcont

          mkdir -p ton-linux-deb-arm64/bin ton-linux-deb-arm64/lib
          cp ton-linux-arm64/* ton-linux-deb-arm64/bin/
          mv ton-linux-deb-arm64/bin/libtonlibjson.so.0.5 ton-linux-deb-arm64/lib/
          chmod 555 ton-linux-deb-arm64/bin/* ton-linux-deb-arm64/lib/*

          mkdir -p ton-linux-deb-amd64/bin ton-linux-deb-amd64/lib
          cp ton-linux-amd64/* ton-linux-deb-amd64/bin/
          mv ton-linux-deb-amd64/bin/libtonlibjson.so.0.5 ton-linux-deb-amd64/lib/
          chmod 555 ton-linux-deb-amd64/bin/* ton-linux-deb-amd64/lib/*
          cp -R ton-linux-deb-amd64 ton-linux-rpm-amd64
          cp -R ton-linux-deb-arm64 ton-linux-rpm-aarch64

          mkdir packages-out
          # deb
          chmod +x $REPO_DIR/packages/deb.sh
          $REPO_DIR/packages/deb.sh packages-out $REPO_DIR/packages/deb/ton $PWD/ton-linux-deb-amd64 amd64 ${TAG:1}
          $REPO_DIR/packages/deb.sh packages-out $REPO_DIR/packages/deb/ton $PWD/ton-linux-deb-arm64 arm64 ${TAG:1}
          cd packages-out/deb-install
          dpkg-scanpackages -a amd64 . > Packages
          dpkg-scanpackages -a arm64 . >> Packages
          apt-ftparchive release . > Release

          # rpm
          sudo apt install -y createrepo-c
          cd ../..
          chmod +x $REPO_DIR/packages/rpm.sh
          $REPO_DIR/packages/rpm.sh packages-out $REPO_DIR/packages/rpm/SPECS/ton.spec $PWD/ton-linux-rpm-amd64 amd64 ${TAG:1}
          $REPO_DIR/packages/rpm.sh packages-out $REPO_DIR/packages/rpm/SPECS/ton.spec $PWD/ton-linux-rpm-aarch64 aarch64 ${TAG:1}
          cd packages-out/rpm-install
          createrepo_c .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload deb packages to release
        run: |
          git fetch --all --tags
          TAG=$(gh release list |  awk '{print $(NF-1)}')
          echo "latest TAG = $TAG"
          gh release upload --clobber $TAG ../work/packages-out/deb-install/Packages ../work/packages-out/deb-install/Release ../work/packages-out/deb-install/ton_amd64.deb ../work/packages-out/deb-install/ton_arm64.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      ## SSH and git setup
      - run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.PACKAGES_REPO_KEY }}"
          ssh-add -L
          mkdir -p ~/.ssh
          echo 'StrictHostKeyChecking accept-new' >> ~/.ssh/config
          git config --global user.name ghactions
          git config --global user.email actions@github.com

      ## RPM release
      # We can't rely on GH Releases for RPM because a RPM repo must have a repodata/ directory
      # and Releases don't support directories
      - name: Upload rpm packages to ton-blockchain/rpm-repo
        run: |
          git clone git@github.com:neodix42/rpm-repo.git
          cd rpm-repo
          git rm -rf *
          cp -r ../work/packages-out/rpm-install rpm
          git add .
          git commit --amend -m "Push rpm artifacts $(date -I)"
          git push -f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}